version: '3.8'

services:
  postgres:
    image: docker.io/postgres:15
    restart: always
    networks:
      - n8n-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_NON_ROOT_USER: ${POSTGRES_NON_ROOT_USER}
      POSTGRES_NON_ROOT_PASSWORD: ${POSTGRES_NON_ROOT_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    networks:
      - n8n-network
    environment:
      # Configuration de la base de données
      DB_TYPE: postgresdb
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_USER: ${POSTGRES_NON_ROOT_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_NON_ROOT_PASSWORD}
      DB_POSTGRESDB_SCHEMA: public
      
      # Configuration générale
      N8N_BASIC_AUTH_ACTIVE: true
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
      N8N_RUNNERS_ENABLED: true
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: true

      # URL de base pour les webhooks
      WEBHOOK_URL: http://localhost:5678/
      
      # Configuration du fuseau horaire
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE}
      TZ: ${GENERIC_TIMEZONE}
      
      # Configuration de sécurité
      N8N_SECURE_COOKIE: false
      
      # Clé de chiffrement (important pour les credentials)
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./workflows:/import/workflows:ro
      - ./credentials:/import/credentials:ro
    depends_on:
      postgres:
        condition: service_healthy

  ollama:
    image: docker.io/ollama/ollama:latest
    restart: always
    networks:
      - n8n-network
    ports:
      - "11435:11434" #On expose sur un port différent pour éviter les conflits locaux
    volumes:
      - ollama_storage:/root/.ollama
    environment:
      # Configuration Ollama
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: "*"
      OLLAMA_PORT: "11434"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        reservations:
          # Réserver au minimum 2GB de RAM pour Ollama
          memory: 2G

  qdrant:
    image: docker.io/qdrant/qdrant:latest
    restart: always
    networks:
      - n8n-network
    ports:
      - "6333:6333"
      - "6334:6334"  # gRPC port
    volumes:
      - qdrant_storage:/qdrant/storage
      - ./vector-store-qdrant/qdrant-config.yaml:/qdrant/config/production.yaml:ro
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  db_storage:
  n8n_storage:
  ollama_storage:
  qdrant_storage:

networks:
  n8n-network:
    driver: bridge
