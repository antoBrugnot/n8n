name: üê≥ Validate Docker Compose

on:
  push:
    branches: [ master ]
    paths:
      - 'docker-compose.yml'
      - '.env'
      - '.github/workflows/validate-docker-compose.yml'
  pull_request:
    branches: [ feature/*, bugfix/* ]
    paths:
      - 'docker-compose.yml'
      - '.env'
      - '.github/workflows/validate-docker-compose.yml'
  workflow_dispatch:

env:
  COMPOSE_FILE: docker-compose.yml

jobs:
  validate-compose:
    name: üîç Validate Docker Compose Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üîß Set up Docker Compose
      run: |
        # V√©rifier la version de Docker Compose
        docker compose version
        echo "‚úÖ Docker Compose version check passed"
        
    - name: üìã Create test environment file
      run: |
        # Cr√©er un fichier .env pour les tests
        cat << 'EOF' > .env
        # Test environment variables
        POSTGRES_DB=n8n_test
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=test_password_123
        POSTGRES_NON_ROOT_USER=n8n
        POSTGRES_NON_ROOT_PASSWORD=test_n8n_password_123
        N8N_BASIC_AUTH_USER=admin
        N8N_BASIC_AUTH_PASSWORD=test_admin_password_123
        N8N_ENCRYPTION_KEY=test_encryption_key_1234567890abcdef
        GENERIC_TIMEZONE=Europe/Paris
        EOF
        echo "‚úÖ Test environment file created"

    - name: üîç Validate Docker Compose syntax
      run: |
        echo "üîç Validating Docker Compose syntax..."
        if docker compose config --quiet; then
          echo "‚úÖ Docker Compose syntax is valid"
        else
          echo "‚ùå Docker Compose syntax validation failed"
          exit 1
        fi

    - name: üìä Analyze Docker Compose configuration
      run: |
        echo "üìä Analyzing Docker Compose configuration..."
        
        # Afficher la configuration pars√©e (pour debug)
        echo "--- Configuration parsed ---"
        docker compose config
        
        # V√©rifications sp√©cifiques
        echo "--- Configuration Analysis ---"
        
        # V√©rifier la pr√©sence des services essentiels
        if docker compose config --services | grep -q "n8n"; then
          echo "‚úÖ n8n service found"
        else
          echo "‚ùå n8n service missing"
          exit 1
        fi
        
        if docker compose config --services | grep -q "postgres"; then
          echo "‚úÖ postgres service found"
        else
          echo "‚ùå postgres service missing"
          exit 1
        fi
        
        # V√©rifier que les volumes sont d√©finis
        if docker compose config --volumes | grep -q "n8n_storage"; then
          echo "‚úÖ n8n_storage volume defined"
        else
          echo "‚ùå n8n_storage volume missing"
          exit 1
        fi
        
        # V√©rifier la pr√©sence du r√©seau
        if docker compose config | grep -q "networks:"; then
          echo "‚úÖ Networks configuration found"
        else
          echo "‚ö†Ô∏è  No custom networks defined"
        fi

    - name: üß™ Test Docker Compose build
      run: |
        echo "üß™ Testing Docker Compose build process..."
        
        # Test du build sans d√©marrer les services
        if docker compose build --no-cache n8n; then
          echo "‚úÖ n8n service build successful"
        else
          echo "‚ùå n8n service build failed"
          exit 1
        fi

    - name: üîí Security scan of Docker Compose
      run: |
        echo "üîí Performing security analysis..."
        
        # V√©rifications de s√©curit√© basiques
        echo "--- Security Analysis ---"
        
        # V√©rifier qu'on n'utilise pas de mots de passe en dur
        if grep -q "password.*:" docker-compose.yml && ! grep -q "\${" docker-compose.yml; then
          echo "‚ö†Ô∏è  Potential hardcoded passwords found"
        else
          echo "‚úÖ No hardcoded passwords detected"
        fi
        
        # V√©rifier l'utilisation de variables d'environnement
        if grep -q "\${" docker-compose.yml; then
          echo "‚úÖ Environment variables are used"
        else
          echo "‚ö†Ô∏è  Consider using environment variables for configuration"
        fi
        
        # V√©rifier les ports expos√©s
        exposed_ports=$(docker compose config | grep -E "^\s+- \"[0-9]+:" | wc -l)
        echo "üìä Number of exposed ports: $exposed_ports"
        
        if [ "$exposed_ports" -gt 5 ]; then
          echo "‚ö†Ô∏è  Many ports exposed, review for security"
        else
          echo "‚úÖ Reasonable number of exposed ports"
        fi

    - name: üöÄ Test services startup (dry-run)
      run: |
        echo "üöÄ Testing services startup..."
        
        # Test de d√©marrage avec validation uniquement
        if docker compose up --dry-run; then
          echo "‚úÖ Services startup validation passed"
        else
          echo "‚ùå Services startup validation failed"
          exit 1
        fi

    - name: üìã Generate validation report
      if: always()
      run: |
        echo "üìã Generating validation report..."
        
        # **MEASUREMENT**: Collecter les m√©triques
        SERVICES_COUNT=$(docker compose config --services | wc -l)
        VOLUMES_COUNT=$(docker compose config --volumes | wc -l)
        NETWORKS_COUNT=$(docker compose config | grep -c "networks:" || echo "0")
        VALIDATION_DATE=$(date -Iseconds)
        
        # **SHARING**: G√©n√©rer le rapport avec les vraies valeurs
        cat << EOF > validation-report.md
        # üê≥ Docker Compose Validation Report
        
        ## üìä Summary
        - **File**: \`docker-compose.yml\`
        - **Validation Date**: ${VALIDATION_DATE}
        - **Commit**: ${{ github.sha }}
        - **Branch**: ${{ github.ref_name }}
        - **Workflow Run**: #${{ github.run_number }}
        
        ## ‚úÖ Validations Performed
        - [x] Syntax validation
        - [x] Service configuration analysis
        - [x] Build process testing
        - [x] Security scanning
        - [x] Startup validation
        
        ## üìà Metrics
        - **Services**: ${SERVICES_COUNT}
        - **Volumes**: ${VOLUMES_COUNT}
        - **Networks**: ${NETWORKS_COUNT}
        - **Exposed Ports**: $(docker compose config | grep -E "^\s+- \"[0-9]+:" | wc -l)
        
        ## üîß Configuration Details
        ### Services detected:
        $(docker compose config --services | sed 's/^/- /')
        
        ### Volumes detected:
        $(docker compose config --volumes | sed 's/^/- /' || echo "- No named volumes")
        
        ## üîí Security Analysis
        - Environment variables usage: $(grep -c "\${" docker-compose.yml || echo "0") occurrences
        - Hardcoded passwords check: $(if grep -q "password.*:" docker-compose.yml && ! grep -q "\${" docker-compose.yml; then echo "‚ö†Ô∏è Potential issues found"; else echo "‚úÖ No issues detected"; fi)
        
        ## ÔøΩ Performance Metrics
        - Build validation: $(if docker compose config --quiet 2>/dev/null; then echo "‚úÖ Passed"; else echo "‚ùå Failed"; fi)
        - Configuration size: $(wc -l < docker-compose.yml) lines
        
        ---
        *Report generated by GitHub Actions on ${VALIDATION_DATE}*
        EOF
        
        echo "‚úÖ Validation report generated with metrics:"
        echo "  - Services: ${SERVICES_COUNT}"
        echo "  - Volumes: ${VOLUMES_COUNT}" 
        echo "  - Networks: ${NETWORKS_COUNT}"

    - name: üì§ Upload validation artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose-validation-${{ github.run_number }}
        path: |
          validation-report.md
          community-nodes-report.txt
          docker-compose.yml
          .env
        retention-days: 30

    - name: üßπ Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up test artifacts..."
        
        # Nettoyer les images de test
        docker compose down --volumes --remove-orphans 2>/dev/null || true
        docker system prune -f --volumes 2>/dev/null || true
        
        echo "‚úÖ Cleanup completed"

  validate-community-nodes:
    name: üß© Validate Community Nodes Installation
    runs-on: ubuntu-latest
    needs: validate-compose
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üìã Create test environment
      run: |
        cat << 'EOF' > .env
        POSTGRES_DB=n8n_test
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=test_password_123
        POSTGRES_NON_ROOT_USER=n8n
        POSTGRES_NON_ROOT_PASSWORD=test_n8n_password_123
        N8N_BASIC_AUTH_USER=admin
        N8N_BASIC_AUTH_PASSWORD=test_admin_password_123
        N8N_ENCRYPTION_KEY=test_encryption_key_1234567890abcdef
        GENERIC_TIMEZONE=Europe/Paris
        EOF

    - name: üß© Test community nodes installation
      run: |
        echo "üß© Testing community nodes installation..."
        
        # Builder l'image n8n avec les community nodes
        docker compose build n8n
        
        # **MEASUREMENT**: Obtenir le nom de l'image build√©e
        IMAGE_NAME=$(docker compose config --format json | jq -r '.services.n8n.build.dockerfile_inline' | head -1 | grep -o 'FROM.*' | cut -d' ' -f2 || echo "n8n:latest")
        PROJECT_NAME=$(basename $PWD | tr '[:upper:]' '[:lower:]')
        
        echo "üîç Checking installed community nodes..."
        echo "Using image: ${PROJECT_NAME}_n8n"
        
        # **AUTOMATION**: Tester les community nodes avec retry logic
        test_node_installation() {
          local node_name=$1
          local max_attempts=3
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Testing $node_name (attempt $attempt/$max_attempts)..."
            if docker run --rm "${PROJECT_NAME}_n8n" npm list -g "$node_name" 2>/dev/null; then
              echo "‚úÖ $node_name is installed"
              return 0
            else
              echo "‚ö†Ô∏è Attempt $attempt failed for $node_name"
              attempt=$((attempt + 1))
              sleep 2
            fi
          done
          
          echo "‚ùå $node_name installation verification failed after $max_attempts attempts"
          return 1
        }
        
        # Tester chaque community node
        test_node_installation "n8n-nodes-imap-ai" || exit 1
        test_node_installation "n8n-nodes-mcp" || exit 1
        
        echo "‚úÖ All community nodes are properly installed"
        
        # **MEASUREMENT**: G√©n√©rer un rapport des nodes install√©s
        echo "üìä Generating community nodes report..."
        docker run --rm "${PROJECT_NAME}_n8n" npm list -g --depth=0 | grep n8n-nodes > community-nodes-report.txt || echo "No community nodes pattern found" > community-nodes-report.txt
        cat community-nodes-report.txt

  performance-test:
    name: üöÄ Performance & Resource Testing
    runs-on: ubuntu-latest
    needs: validate-compose
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üìã Create test environment
      run: |
        cat << 'EOF' > .env
        POSTGRES_DB=n8n_test
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=test_password_123
        POSTGRES_NON_ROOT_USER=n8n
        POSTGRES_NON_ROOT_PASSWORD=test_n8n_password_123
        N8N_BASIC_AUTH_USER=admin
        N8N_BASIC_AUTH_PASSWORD=test_admin_password_123
        N8N_ENCRYPTION_KEY=test_encryption_key_1234567890abcdef
        GENERIC_TIMEZONE=Europe/Paris
        EOF

    - name: ‚è±Ô∏è Measure build time
      run: |
        echo "‚è±Ô∏è Measuring build performance..."
        
        # **MEASUREMENT**: Mesurer pr√©cis√©ment le temps de build
        start_time=$(date +%s)
        echo "Build started at: $(date -Iseconds)"
        
        docker compose build
        
        end_time=$(date +%s)
        build_duration=$((end_time - start_time))
        
        echo "Build completed at: $(date -Iseconds)"
        echo "üìä Build duration: ${build_duration} seconds"
        
        # **AUTOMATION**: Cr√©er un rapport de performance
        cat << EOF > performance-report.md
        # üöÄ Performance Report
        
        ## Build Metrics
        - **Build Duration**: ${build_duration} seconds
        - **Build Status**: $(if [ $build_duration -gt 300 ]; then echo "‚ö†Ô∏è Slow (>5min)"; else echo "‚úÖ Acceptable"; fi)
        - **Start Time**: $(date -d "@$start_time" -Iseconds)
        - **End Time**: $(date -d "@$end_time" -Iseconds)
        
        ## Recommendations
        $(if [ $build_duration -gt 300 ]; then 
          echo "- Consider optimizing Dockerfile layers"
          echo "- Review community nodes installation process"
          echo "- Add build caching strategies"
        else
          echo "- Build performance is acceptable"
          echo "- No immediate optimizations needed"
        fi)
        EOF
        
        # Alerter si le build prend trop de temps
        if [ $build_duration -gt 300 ]; then
          echo "‚ö†Ô∏è Build took longer than 5 minutes ($build_duration seconds)"
          echo "Consider optimizing the build process"
        else
          echo "‚úÖ Build completed in reasonable time"
        fi
        
        # Sauvegarder la m√©trique pour les autres jobs
        echo "BUILD_DURATION=${build_duration}" >> $GITHUB_ENV

    - name: üìà Analyze resource usage
      run: |
        echo "üìà Analyzing resource requirements..."

        # **MEASUREMENT**: Analyser les requirements de ressources
        if grep -q "deploy:" docker-compose.yml; then
          echo "‚úÖ Resource limits defined in compose file"
          grep -A 10 "deploy:" docker-compose.yml
        else
          echo "‚ö†Ô∏è  No resource limits defined - consider adding them for production"
        fi
        
        # **MEASUREMENT**: V√©rifier la taille des images avec m√©triques d√©taill√©es
        echo "üìä Analyzing image sizes..."
        docker compose pull
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.VirtualSize}}" | head -1
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.VirtualSize}}" | grep -E "(n8n|postgres|ollama|qdrant)" || echo "No matching images found yet"
        
        # **AUTOMATION**: G√©n√©rer un rapport de ressources
        cat << EOF > resource-report.md
        # üìà Resource Analysis Report
        
        ## Resource Limits
        $(if grep -q "deploy:" docker-compose.yml; then 
          echo "‚úÖ Resource limits are defined"
          grep -A 10 "deploy:" docker-compose.yml | sed 's/^/    /'
        else
          echo "‚ö†Ô∏è No resource limits defined"
          echo ""
          echo "### Recommendations:"
          echo "- Add memory limits for production"
          echo "- Consider CPU reservations"
          echo "- Add restart policies"
        fi)
        
        ## Image Sizes
        \`\`\`
        $(docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep -E "(Repository|n8n|postgres|ollama|qdrant)" || echo "Images not yet available")
        \`\`\`
        
        ## Performance Impact
        - Build Duration: ${BUILD_DURATION:-"Not measured"} seconds
        - Resource Profile: $(if grep -q "deploy:" docker-compose.yml; then echo "Optimized"; else echo "Default"; fi)
        EOF
        
        echo "‚úÖ Resource analysis completed"
    
    - name: üì§ Upload performance artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports-${{ github.run_number }}
        path: |
          performance-report.md
          resource-report.md
        retention-days: 30

  notification:
    name: üì¢ Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-compose, validate-community-nodes, performance-test]
    if: always()
    
    steps:
    - name: üì¢ Create validation summary
      run: |
        echo "üì¢ Docker Compose Validation Summary"
        echo "======================================"
        echo "üîç Syntax validation: ${{ needs.validate-compose.result }}"
        echo "üß© Community nodes: ${{ needs.validate-community-nodes.result }}"
        echo "üöÄ Performance test: ${{ needs.performance-test.result }}"
        echo "======================================"
        
        if [[ "${{ needs.validate-compose.result }}" == "success" && 
              "${{ needs.validate-community-nodes.result }}" == "success" && 
              "${{ needs.performance-test.result }}" == "success" ]]; then
          echo "‚úÖ All validations passed successfully!"
          echo "üöÄ Docker Compose configuration is ready for deployment"
        else
          echo "‚ùå Some validations failed"
          echo "üîß Please review the failed jobs and fix the issues"
          exit 1
        fi
